Name:  Justin Stevens
Files included:  image_1.c, image_2.c, image_challenge.c, image.pgm (result of running the challenge program)

For image_1.c, I figured to iterate through the rows and columns since this is typically what's done with multidimensional arrays.  The main challenge I had with this program was determining the condition for when to print the X.  I immediately recognized the first line as being when row==col, however, I could not figure out the second line.  I thought about it mathematically by realizing that it goes through the point (0, user_input-1) and (user_input-1,0), therefore, the line was probably y+x=user_input-1.  I used a little bit of trial and error to determine this, by first trying when row+col==user_input, then remembered that the elements of an array with N elements are 0 to N-1.  After I figured out this condition, I set that value in the array, and then printed it out.

For the image_2.c problem, the first part of the problem I had to figure out was making the user_input equivalent to 2 mod 3.  In order to do this, I used the expression user_input+=(2-rem), where remainder is the value of user_input mod 3.  By doing this, this guarantees that the value will be equivalent to 2 mod 3.  Next, the second part of the problem was figuring out how to print the Tic Tac Toe board.  I noticed that the black lines (when the value is 0) occurs when the board is split into thirds.  Therefore, I thought to declare a variable, quotient, which is the value of the user_input divided by 3.  I next noticed that in the board provided in the project file, column 3, column 7, row 3, and row 7 are all 0's.  Therefore, I figured that the value for row or col to be equal to must be quotient or quotient*2+1 (in the case of when it is 7).  When I tested this, it printed properly, and I realized that we needed to add 1 because the array starts at 0.

Finally, for the challenge problem, I created a new file by the method which was presented in the project file.  I printed to it using the fprintf function, but initially forgot to add fp as the first argument.  Finally, in order to print an X across the whole Tic Tac Toe Board, I also added the condition row==col and row+col==user_input-1 to the if condition which I had nested in the for statement.  This way, it would print both the board and the X.  I then tested the file with several varying pixel sizes, and checked to see if it printed to a picture, and it indeed did :).
