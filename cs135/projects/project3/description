Name:  Justin Stevens
Files included:  robot.c, robot_challenge.c

For this challenge, I decided to include the x and y coordinates in a "Coordinates" structure.  I used this approach for two reasons:  (1) if we wanted to include angles, it would be easier to hold them in a structure, and (2) if there are more than one robot, we don't need to redeclare variables later.  I then initialize in the main function Robot.x and Robot.y to be 0.  Secondly, I created an enumeration for the Directions.  This was simpler for me than making a bunch of nested if statements in my "move left" and "move right" cases, because, in order to go from East to North, all that one needs to do is use the line "dir++;", as each value is assigned to be an int.  The only special case I had to include, which was tricky, is when dir=South, then it's value is 3, therefore 3++ gives 4, which is not contained in the enumeration.  Therefore, I included one if statement, for if the direction is South, then the left of that is East.  Similarly, for the move right statement, since I use dir-- to go right in my enumeration, I included an if statement for if the direction is East, then the right of that is South.  

In order to execute the driving utility, I created a function, Drive, which takes in a Robot of type struct Coordinates, a dir of type enum Direction, and a value (1 for the regular problem, and a user chosen value for the challenge).  Then, for each case with the direction, I adjusted the corresponding x or y coordinate of the robot.  For the case of driving the robot backward, I pass in the negative of that (-1 for the challenge and -val for the challenge).  I then assigned Robot to be the value that this function returned.

Finally, in order to get things to print correctly, I did not know how to directly access the value of dir in the enumeration since it's type is integer, therefore, I used a switch on the value of dir in order to put the direction in a string which could be printed.  